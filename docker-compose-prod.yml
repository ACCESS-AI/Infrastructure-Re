version: '3.9'



services:
  ################### ACCESS DATABASE ###################
  postgres:
    user: :1000
    container_name: postgres
    image: postgres:alpine
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - courses:/var/lib/postgresql/data
    environment:
      TZ: "Europe/Zurich"
      POSTGRES_DB: ${POSTGRES_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  ################### ACCESS IAM ###################
  keycloak:
    user: :1000
    container_name: keycloak
    image: quay.io/keycloak/keycloak:22.0
    restart: always
    privileged: true
    ports:
      - "8080:8080"
      - "8443:8443"
    depends_on:
      - postgres
    volumes:
      - ./access/theme:/opt/keycloak/themes/access/login
      - ./access/realm.json:/opt/keycloak/data/import/realm.json
      - ./access/letsencrypt/live/${DOMAIN}/fullchain.pem:/certs/fullchain.pem
      - ./access/letsencrypt/live/${DOMAIN}/privkey.pem:/certs/privkey.pem
    command: start --import-realm
    environment:
      KC_FEATURES: preview,docker
      KC_PROXY: edge
      KC_DB: postgres
      KC_DB_URL: ${POSTGRES_URL}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_HTTPS_CERTIFICATE_FILE: /certs/fullchain.pem
      KC_HTTPS_CERTIFICATE_KEY_FILE: /certs/privkey.pem
      KC_HOSTNAME_STRICT: 'false'
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      CLIENT_SECRET: ${CLIENT_SECRET}
      PROXY_ADDRESS_FORWARDING: 'true'

  ################### CHATBOT DATABASE ###################
  chatbot_postgres:
    user: :1000
    image: postgres:latest
    restart: always
    container_name: chatbot_postgres
    environment:
      POSTGRES_USER: ${CHATBOT_DB_USER}
      POSTGRES_PASSWORD: ${CHATBOT_DB_PASSWORD}
      POSTGRES_DB: ${CHATBOT_DB_NAME}

  ################### CHATBOT CONTEXT SERVICE ###################
  chatbot_context_service:
    user: :1000
    container_name: chatbot_context_service
    build: https://github.com/ACCESS-AI/Context-Service.git
    ports:
      - "${CHATBOT_CONTEXT_SERVICE_PORT}:3423"
    depends_on:
      - chatbot_postgres
    environment:
      CHATBOT_DB_HOST: ${CHATBOT_DB_DOCKER_CONTAINER_NAME}
      CHATBOT_DB_PORT: ${CHATBOT_DB_PORT}
      CHATBOT_DB_NAME: ${CHATBOT_DB_NAME}
      CHATBOT_DB_USER: ${CHATBOT_DB_USER}
      CHATBOT_DB_PASSWORD: ${CHATBOT_DB_PASSWORD}
      MISTRAL_API_KEY: ${MISTRAL_API_KEY}
      MISTRAL_EMBEDDING_MODEL: ${MISTRAL_EMBEDDING_MODEL}
      VECTOR_STORE_HOST: ${VECTOR_STORE_HOST}
    volumes:
      - ./access/workspace:/usr/data

  ################### CHATBOT VECTOR DATABASE ###################
  etcd:
    user: :1000
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.0
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    #volumes:
    #  - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd

  minio:
    user: :1000
    container_name: milvus-minio
    image: minio/minio:RELEASE.2020-12-03T00-03-10Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    #volumes:
    #  - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data
    command: minio server /minio_data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  standalone:
    user: :1000
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.3.10
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    #volumes:
    #  - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"

  ################### BACKEND ###################
  backend:
    user: :1000
    container_name: backend
    build: https://github.com/ACCESS-AI/Backend-Re.git
    restart: always
    privileged: true
    ports:
      - "8081:8081"
    depends_on:
      - keycloak
      - docker
    volumes:
      - ./access/workspace:/workspace/data
      - ./access/tls/client:/tls/client:ro
    environment:
      TZ: "Europe/Zurich"
      POSTGRES_URL: ${POSTGRES_URL}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      AUTH_SERVER_URL: ${AUTH_SERVER_URL}
      DOCKER_HOST: tcp://docker:2376
      DOCKER_TLS_VERIFY: 'true'
      DOCKER_CERT_PATH: /tls/client
      API_KEY: ${API_KEY}
      WORKING_DIR: /workspace/data
      MISTRAL_API_KEY: ${MISTRAL_API_KEY}
      MISTRAL_EMBEDDING_MODEL: ${MISTRAL_EMBEDDING_MODEL}
      MISTRAL_EMBEDDING_HOST: ${MISTRAL_EMBEDDING_HOST}
      MISTRAL_LLM_MODEL: ${MISTRAL_LLM_MODEL}
      MISTRAL_LLM_HOST: ${MISTRAL_LLM_HOST}
      VECTOR_STORE_HOST: ${VECTOR_STORE_HOST}
      SIMILARITY_SCORE_THRESHOLD: ${SIMILARITY_SCORE_THRESHOLD}
      TOP_K_RESULTS: ${TOP_K_RESULTS}
      CHATBOT_DB_URL: ${CHATBOT_DB_URL}
      CHATBOT_DB_USER: ${CHATBOT_DB_USER}
      CHATBOT_DB_PASSWORD: ${CHATBOT_DB_PASSWORD}
      CHATBOT_CONTEXT_SERVICE_URL: ${CHATBOT_CONTEXT_SERVICE_URL}
  
  ################### FRONTEND ###################
  frontend:
    user: :1000
    container_name: frontend
    build: https://github.com/ACCESS-AI/Frontend-Re.git
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./access/certbot:/var/www/certbot
      - ./access/letsencrypt:/etc/letsencrypt
      - ./access/nginx.conf:/etc/nginx/conf.d/nginx.conf
    environment:
      DOMAIN: ${DOMAIN}

  ################### DOCKER IN DOCKER ###################
  docker:
    user: :1000
    container_name: docker
    image: docker:dind
    privileged: true
    init: true
    ports:
      - "2376:2376"
    volumes:
      - ./access/workspace:/workspace/data
      - ./access/tls/ca:/tls/ca
      - ./access/tls/client:/tls/client
    environment:
      DOCKER_TLS_CERTDIR: /tls

  ################## CERTBOT ###################
  certbot:
    user: :1000
    image: certbot/certbot
    container_name: certbot
    ports:
      - "80:80"
    volumes:
      - ./access/certbot:/var/www/certbot
      - ./access/letsencrypt:/etc/letsencrypt
    command: >-
             certonly -v --standalone
             --email ${LETSENCRYPT_EMAIL} -d ${DOMAIN} --agree-tos
             --non-interactive

volumes:
  courses: